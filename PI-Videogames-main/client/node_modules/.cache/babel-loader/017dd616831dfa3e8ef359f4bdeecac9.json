{"ast":null,"code":"var _jsxFileName = \"/Users/consudc/Documents/GitHub/PI VIDEOGAMES/PI-Videogames-main/client/src/components/Paginado.js\";\nimport React from 'react';\nimport styles from \"./Paginado.module.css\"; //aca te traes por props el estado de tus games per Page=15, el numero de videogames en todo el estado global =100 \n//paginado ==> se va seteando currentPage a medida que (el numero de numero de pagina cambia )\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Paginado(_ref) {\n  let {\n    allGames,\n    gamesPerPage,\n    paginado\n  } = _ref;\n  const pageNumber = []; //que redonde por arriba la division\n  //en nuestro caso son 7 --> 100/15\n\n  for (let i = 0; i <= allGames / gamesPerPage; i++) {\n    pageNumber.push(i + 1);\n  } //entonces en PageNumber te va devolver un array con 7 numeros que equivalen a la cantidad de paginas que hay, de 15 juegos por pagina\n  // aca le decis, existe pageNumber? si si mapealo y creame un ul con cada uno de los numero de pagina  y que se pueda hacer un onclick en cada uno de los numero y ahi se va a ir seteando el estado del currentPage a medida que le pasemos el numero atravez del onclik de c/ pagina ==>setCurrentPage \n  // <a  onClick={()=>paginado(number)}>{number}</a>\n\n\n  const handleClickPrev = () => {\n    pageNumber.map(num);\n  };\n\n  const handleClickNext = e => {\n    paginado(e.target.value - 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: styles.nav,\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => handleClickPrev(e),\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), pageNumber && pageNumber.map(number => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => paginado(number) // className={number=== number? \"active\" : null}\n        ,\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClickNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Paginado;\nexport default Paginado;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginado\");","map":{"version":3,"sources":["/Users/consudc/Documents/GitHub/PI VIDEOGAMES/PI-Videogames-main/client/src/components/Paginado.js"],"names":["React","styles","Paginado","allGames","gamesPerPage","paginado","pageNumber","i","push","handleClickPrev","map","num","handleClickNext","e","target","value","nav","number"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB,C,CAGA;AACA;;;;AAGA,SAASC,QAAT,OAAsD;AAAA,MAApC;AAACC,IAAAA,QAAD;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,GAAoC;AACtD,QAAMC,UAAU,GAAG,EAAnB,CADsD,CAGlD;AACA;;AACA,OAAK,IAAIC,CAAC,GAAE,CAAZ,EAAeA,CAAC,IAAIJ,QAAQ,GAACC,YAA7B,EAA4CG,CAAC,EAA7C,EAAgD;AAC3CD,IAAAA,UAAU,CAACE,IAAX,CAAgBD,CAAC,GAAC,CAAlB;AAEJ,GARiD,CAUtD;AAEe;AACF;;;AAEX,QAAOE,eAAe,GAAG,MAAK;AAC1BH,IAAAA,UAAU,CAACI,GAAX,CAAgBC,GAAhB;AAED,GAHH;;AASA,QAAOC,eAAe,GAAIC,CAAD,IAAM;AAC7BR,IAAAA,QAAQ,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAT,GAAgB,CAAjB,CAAR;AACD,GAFD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAEd,MAAM,CAACe,GAAvB;AAAA,2BACI;AAAA,8BACA;AAAQ,QAAA,OAAO,EAAGH,CAAD,IAAKJ,eAAe,CAACI,CAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAGMP,UAAU,IACZA,UAAU,CAACI,GAAX,CAAeO,MAAM,iBACjB;AACA,QAAA,OAAO,EAAE,MAAIZ,QAAQ,CAACY,MAAD,CADrB,CAEA;AAFA;AAAA,kBAICA;AAJD,SAASA,MAAT;AAAA;AAAA;AAAA;AAAA,cADJ,CAJJ,eAaR;AAAQ,QAAA,OAAO,EAAEL,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbQ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;KAhDQV,Q;AAkDT,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport styles from \"./Paginado.module.css\"\n\n\n//aca te traes por props el estado de tus games per Page=15, el numero de videogames en todo el estado global =100 \n//paginado ==> se va seteando currentPage a medida que (el numero de numero de pagina cambia )\n\n\nfunction Paginado({allGames, gamesPerPage, paginado}) {\nconst pageNumber = []\n\n    //que redonde por arriba la division\n    //en nuestro caso son 7 --> 100/15\n    for (let i= 0; i<= (allGames/gamesPerPage); i++){\n         pageNumber.push(i+1)\n\n    }\n \n//entonces en PageNumber te va devolver un array con 7 numeros que equivalen a la cantidad de paginas que hay, de 15 juegos por pagina\n\n               // aca le decis, existe pageNumber? si si mapealo y creame un ul con cada uno de los numero de pagina  y que se pueda hacer un onclick en cada uno de los numero y ahi se va a ir seteando el estado del currentPage a medida que le pasemos el numero atravez del onclik de c/ pagina ==>setCurrentPage \n             // <a  onClick={()=>paginado(number)}>{number}</a>\n                \n  const  handleClickPrev = () =>{\n      pageNumber.map((num))\n    \n    }\n\n\n  \n\n\n  const  handleClickNext = (e) =>{\n    paginado(e.target.value -1)\n  } \n  \n  \n  return (\n    <nav className={styles.nav} >\n        <ul >\n        <button onClick={(e)=>handleClickPrev(e)}>Prev</button>    \n          \n            { pageNumber &&\n            pageNumber.map(number => (    \n                <li key={number}\n                onClick={()=>paginado(number)}\n                // className={number=== number? \"active\" : null}\n                >\n                {number} \n                </li>\n                ))\n            }\n<button onClick={handleClickNext}>Next</button>    \n        </ul>\n    </nav>\n  )\n}\n\nexport default Paginado"]},"metadata":{},"sourceType":"module"}