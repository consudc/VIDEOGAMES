{"ast":null,"code":"import { GET_GAME_BYNAME, GET_GENRE, GET_GAME_DETAIL, GET_VIDEOGAME, ORDER_NAME, ORDER_RATING, FILTER_CREATED, FILTER_GENRE, GET_PLATFORMS, CREATE_VIDEOGAMES } from \"./types\"; // EL REDUCER SIEMPRE TIENE QUE GENERAR UN NUEVO ESTADO!!! osea cuando se modifique algo\n//esto puede ser tmb un objeto, o un array que contenga los objetos\n\nconst initialState = {\n  allVideogames: [],\n  pokemons: [],\n  genres: [],\n  plat\n}; // aca el estado es el estado inicial y luego el otro parametro es la action pero hago destructuring {type, payload}\n\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_POKEMON:\n      return { ...state,\n        allPokemons: action.payload,\n        pokemons: action.payload\n      };\n\n    case FILTER_TYPE:\n      const allPokemons = state.allPokemons; //(en este caso el payload va a ser el value del select)\n      // si el value o el payload es igual a All que me traiga todos los pokemons\n\n      const typeFiltered = action.payload === \"All\" ? allPokemons : allPokemons.filter(el => el.types.includes(action.payload)); // if (el.types.length === 1){ \n      // return el.types.includes(action.payload)}\n      // else if (el.types.length === 2){\n      // return el.types[0].includes(action.payload) ||\n      // el.types[1].includes(action.payload)\n      // }\n      // else {\n      //   return null\n      // }\n      // })\n\n      console.log(typeFiltered);\n      return { ...state,\n        pokemons: typeFiltered\n      };\n\n    case FILTER_CREATED:\n      const pokemosFilCreated = state.allPokemons;\n      const createdFiltered = action.payload === \"creado\" ? pokemosFilCreated.filter(el => el.createdInDb) : pokemosFilCreated.filter(el => !el.createdInDb);\n      return { ...state,\n        pokemons: action.payload === \"all\" ? pokemosFilCreated : createdFiltered\n      };\n\n    case GET_POK_BYNAME:\n      return { ...state,\n        pokemons: action.payload\n      };\n\n    case CREATE_POKEMON:\n      return { ...state\n      };\n\n    case GET_TYPES:\n      return { ...state,\n        types: action.payload\n      };\n    //     case REMOVE_POKEMON :\n    //         //aca lo que hace es un nuevo array que contenga todos los contactos con id diferentes al payload\n    //         return state.filter (c => c.id !== payload)\n    //     case ADD_POKEMON: \n    //     //aca nescito crear otro array!!!\n    //     return state.map((contact) => {\n    //         if (contact.id === payload){\n    //             //si mapeando el state encuentra el id del contacto que se pasa por payload, crea un nuevo objeto, copiando la info anterior y pasando el fav en true\n    //         return {...contact, fav : true}\n    //         // en caso que no lo encuntre simeplemnte hace una copia del objeto anterior\n    //     } return {...contact}\n    // })\n\n    case ORDER_NAME:\n      const pokemosOrder = state.pokemons;\n      const orderAlph = action.payload === \"asc\" ? pokemosOrder.sort(function (a, b) {\n        if (a.name > b.name) {\n          return 1;\n        }\n\n        if (b.name > a.name) {\n          return -1;\n        } else return 0;\n      }) : pokemosOrder.sort(function (a, b) {\n        if (a.name > b.name) {\n          return -1;\n        }\n\n        if (b.name > a.name) {\n          return 1;\n        } else return 0;\n      });\n      console.log(state);\n      return { ...state,\n        pokemons: orderAlph\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/consudc/Documents/GitHub/PI VIDEOGAMES/PI-Videogames-main/client/src/reducer/index.js"],"names":["GET_GAME_BYNAME","GET_GENRE","GET_GAME_DETAIL","GET_VIDEOGAME","ORDER_NAME","ORDER_RATING","FILTER_CREATED","FILTER_GENRE","GET_PLATFORMS","CREATE_VIDEOGAMES","initialState","allVideogames","pokemons","genres","plat","reducer","state","action","type","GET_POKEMON","allPokemons","payload","FILTER_TYPE","typeFiltered","filter","el","types","includes","console","log","pokemosFilCreated","createdFiltered","createdInDb","GET_POK_BYNAME","CREATE_POKEMON","GET_TYPES","pokemosOrder","orderAlph","sort","a","b","name"],"mappings":"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","sourcesContent":["import {GET_GAME_BYNAME, GET_GENRE, GET_GAME_DETAIL, GET_VIDEOGAME, ORDER_NAME, ORDER_RATING, FILTER_CREATED, FILTER_GENRE, GET_PLATFORMS, CREATE_VIDEOGAMES} from \"./types\"\n\n\n// EL REDUCER SIEMPRE TIENE QUE GENERAR UN NUEVO ESTADO!!! osea cuando se modifique algo\n//esto puede ser tmb un objeto, o un array que contenga los objetos\nconst initialState = {\n    allVideogames : [],\n    pokemons: [],\n    genres: [],\n    plat\n\n}\n\n\n\n// aca el estado es el estado inicial y luego el otro parametro es la action pero hago destructuring {type, payload}\nfunction reducer (state = initialState, action){\n    switch (action.type){\n        \n        case GET_POKEMON : \n\n            return {\n                ...state,\n                allPokemons: action.payload,\n                pokemons: action.payload,\n                \n                \n            }\n\n\n        case FILTER_TYPE : \n\n        const allPokemons = state.allPokemons\n        \n        //(en este caso el payload va a ser el value del select)\n        // si el value o el payload es igual a All que me traiga todos los pokemons\n\n        \n        const typeFiltered = action.payload === \"All\"? allPokemons: \n        \n        allPokemons.filter((el) => \n        el.types.includes(action.payload))\n        \n\n        // if (el.types.length === 1){ \n        // return el.types.includes(action.payload)}\n\n        // else if (el.types.length === 2){\n        // return el.types[0].includes(action.payload) ||\n        // el.types[1].includes(action.payload)\n        \n        // }\n        // else {\n        //   return null\n        // }\n    // })\n\n    console.log(typeFiltered)\n        return {\n            ...state,\n            pokemons: typeFiltered\n        }\n\n    case FILTER_CREATED :\n\n    const pokemosFilCreated = state.allPokemons\n\n    const createdFiltered = action.payload === \"creado\"? pokemosFilCreated.filter((el) =>el.createdInDb) : \n\n    pokemosFilCreated.filter((el) =>!el.createdInDb)\n\n    return{\n        ...state,\n        pokemons: action.payload ===\"all\"? pokemosFilCreated :createdFiltered\n    }\n\n    case GET_POK_BYNAME :\n        \n        \n        return{\n            ...state,\n            pokemons: action.payload \n        }\n\n    case CREATE_POKEMON :\n        \n            return{\n                ...state,\n            }\n\n    case GET_TYPES:\n        return{\n        ...state,\n        types: action.payload \n                }\n\n    \n       \n   \n\n\n\n    \n\n    //     case REMOVE_POKEMON :\n    //         //aca lo que hace es un nuevo array que contenga todos los contactos con id diferentes al payload\n\n    //         return state.filter (c => c.id !== payload)\n    //     case ADD_POKEMON: \n\n    //     //aca nescito crear otro array!!!\n\n    //     return state.map((contact) => {\n            \n    //         if (contact.id === payload){\n\n    //             //si mapeando el state encuentra el id del contacto que se pasa por payload, crea un nuevo objeto, copiando la info anterior y pasando el fav en true\n    //         return {...contact, fav : true}\n\n    //         // en caso que no lo encuntre simeplemnte hace una copia del objeto anterior\n    //     } return {...contact}\n    \n    // })\n        \n    case ORDER_NAME : \n\n    const pokemosOrder = state.pokemons\n\n    const orderAlph = action.payload === \"asc\"? \n    \n    pokemosOrder.sort(function(a, b){\n        if (a.name > b.name){\n        return 1}\n        if (b.name > a.name){\n            return -1}\n        else return 0\n    })\n     : pokemosOrder.sort(function(a, b){\n        if (a.name > b.name){\n        return -1}\n        if (b.name > a.name){\n            return 1}\n        else return 0\n    })\n    console.log(state)\n\n    return{\n        ...state,\n        pokemons: orderAlph\n    }\n\n     \n        default : \n        return state;\n    }\n\n}\n\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}