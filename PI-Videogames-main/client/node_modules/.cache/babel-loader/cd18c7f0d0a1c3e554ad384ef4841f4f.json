{"ast":null,"code":"var _jsxFileName = \"/Users/consudc/Documents/GitHub/PI VIDEOGAMES/PI-Videogames-main/client/src/components/Paginado.js\";\nimport React from 'react';\nimport styles from \"./Paginado.module.css\";\nimport { useState } from 'react'; //aca te traes por props el estado de tus games per Page=15, el numero de videogames en todo el estado global =100 \n//paginado ==> se va seteando currentPage a medida que (el numero de numero de pagina cambia )\n// \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [currentPage, setCurrentPage] = useState(1);\n\nconst paginado = pageNumber => {\n  setCurrentPage(pageNumber);\n};\n\nfunction Paginado(_ref) {\n  let {\n    allGames,\n    gamesPerPage,\n    paginado\n  } = _ref;\n  const pageNumber = []; //que redonde por arriba la division\n  //en nuestro caso son 7 --> 100/15\n\n  for (let i = 0; i <= allGames / gamesPerPage; i++) {\n    pageNumber.push(i + 1);\n  }\n\n  console.log(pageNumber); //entonces en PageNumber te va devolver un array con 7 numeros que equivalen a la cantidad de paginas que hay, de 15 juegos por pagina\n  // aca le decis, existe pageNumber? si si mapealo y creame un ul con cada uno de los numero de pagina  y que se pueda hacer un onclick en cada uno de los numero y ahi se va a ir seteando el estado del currentPage a medida que le pasemos el numero atravez del onclik de c/ pagina ==>setCurrentPage \n  // <a  onClick={()=>paginado(number)}>{number}</a>\n\n  const handleClickPrev = () => {\n    paginado(currentPage - 1);\n  };\n\n  const handleClickNext = () => {\n    paginado(currentPage + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: styles.nav,\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClickPrev,\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), pageNumber && pageNumber.map(number => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => paginado(number),\n        className: paginado(number) === number ? \"active\" : null,\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClickNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Paginado;\nexport default Paginado;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginado\");","map":{"version":3,"sources":["/Users/consudc/Documents/GitHub/PI VIDEOGAMES/PI-Videogames-main/client/src/components/Paginado.js"],"names":["React","styles","useState","currentPage","setCurrentPage","paginado","pageNumber","Paginado","allGames","gamesPerPage","i","push","console","log","handleClickPrev","handleClickNext","nav","map","number"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CAGA;AACA;AAEA;;;AAEA,MAAK,CAACC,WAAD,EAAcC,cAAd,IAAgCF,QAAQ,CAAC,CAAD,CAA7C;;AAEA,MAAMG,QAAQ,GAAIC,UAAD,IAAe;AAC9BF,EAAAA,cAAc,CAACE,UAAD,CAAd;AAA2B,CAD7B;;AAGA,SAASC,QAAT,OAAsD;AAAA,MAApC;AAACC,IAAAA,QAAD;AAAWC,IAAAA,YAAX;AAAyBJ,IAAAA;AAAzB,GAAoC;AACtD,QAAMC,UAAU,GAAG,EAAnB,CADsD,CAIlD;AACA;;AACA,OAAK,IAAII,CAAC,GAAE,CAAZ,EAAeA,CAAC,IAAIF,QAAQ,GAACC,YAA7B,EAA4CC,CAAC,EAA7C,EAAgD;AAC3CJ,IAAAA,UAAU,CAACK,IAAX,CAAgBD,CAAC,GAAC,CAAlB;AAEJ;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ,EAVkD,CAWtD;AAEe;AACF;;AAEX,QAAOQ,eAAe,GAAG,MAAK;AAC5BT,IAAAA,QAAQ,CAACF,WAAW,GAAE,CAAd,CAAR;AAED,GAHD;;AAMA,QAAOY,eAAe,GAAG,MAAK;AAC5BV,IAAAA,QAAQ,CAACF,WAAW,GAAG,CAAf,CAAR;AACD,GAFD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAEF,MAAM,CAACe,GAAvB;AAAA,2BACI;AAAA,8BACA;AAAQ,QAAA,OAAO,EAAEF,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAGMR,UAAU,IACZA,UAAU,CAACW,GAAX,CAAeC,MAAM,iBACjB;AACA,QAAA,OAAO,EAAE,MAAIb,QAAQ,CAACa,MAAD,CADrB;AAEA,QAAA,SAAS,EAAEb,QAAQ,CAACa,MAAD,CAAR,KAAoBA,MAApB,GAA4B,QAA5B,GAAuC,IAFlD;AAAA,kBAGCA;AAHD,SAASA,MAAT;AAAA;AAAA;AAAA;AAAA,cADJ,CAJJ,eAYR;AAAQ,QAAA,OAAO,EAAEH,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZQ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;KA7CQR,Q;AA+CT,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport styles from \"./Paginado.module.css\"\nimport { useState } from 'react'\n\n\n//aca te traes por props el estado de tus games per Page=15, el numero de videogames en todo el estado global =100 \n//paginado ==> se va seteando currentPage a medida que (el numero de numero de pagina cambia )\n\n// \n\nconst[currentPage, setCurrentPage] = useState(1)\n\nconst paginado = (pageNumber) =>{\n  setCurrentPage(pageNumber)}\n \nfunction Paginado({allGames, gamesPerPage, paginado}) {\nconst pageNumber = []\n\n\n    //que redonde por arriba la division\n    //en nuestro caso son 7 --> 100/15\n    for (let i= 0; i<= (allGames/gamesPerPage); i++){\n         pageNumber.push(i+1)\n\n    }\n    console.log(pageNumber)\n//entonces en PageNumber te va devolver un array con 7 numeros que equivalen a la cantidad de paginas que hay, de 15 juegos por pagina\n\n               // aca le decis, existe pageNumber? si si mapealo y creame un ul con cada uno de los numero de pagina  y que se pueda hacer un onclick en cada uno de los numero y ahi se va a ir seteando el estado del currentPage a medida que le pasemos el numero atravez del onclik de c/ pagina ==>setCurrentPage \n             // <a  onClick={()=>paginado(number)}>{number}</a>\n                \n  const  handleClickPrev = () =>{\n    paginado(currentPage -1)\n\n  } \n\n\n  const  handleClickNext = () =>{\n    paginado(currentPage + 1)\n  } \n  \n  \n  return (\n    <nav className={styles.nav} >\n        <ul >\n        <button onClick={handleClickPrev}>Prev</button>    \n          \n            { pageNumber &&\n            pageNumber.map(number => (    \n                <li key={number}\n                onClick={()=>paginado(number)}\n                className={paginado(number)=== number? \"active\" : null}>\n                {number} \n                </li>\n                ))\n            }\n<button onClick={handleClickNext}>Next</button>    \n        </ul>\n    </nav>\n  )\n}\n\nexport default Paginado"]},"metadata":{},"sourceType":"module"}