{"ast":null,"code":"import { GET_GAME_BYNAME, GET_GENRE, GET_GAME_DETAIL, GET_VIDEOGAME, ORDER_NAME, ORDER_RATING, FILTER_CREATED, FILTER_GENRE, GET_PLATFORMS, CREATE_VIDEOGAMES } from \"./types\"; // EL REDUCER SIEMPRE TIENE QUE GENERAR UN NUEVO ESTADO, ESTE ES EL ESTADO GLOBAL!!! osea cuando se modifique algo\n//esto puede ser tmb un objeto, o un array que contenga los objetos\n\nconst initialState = {\n  allVideogames: [],\n  videogames: [],\n  genres: [],\n  platforms: []\n}; // aca el estado es el estado inicial y luego el otro parametro es la action pero hago destructuring {type, payload}\n\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    payload,\n    type\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case GET_VIDEOGAME:\n      return { ...state,\n        allVideogames: payload,\n        videogames: payload\n      };\n\n    case FILTER_GENRE:\n      const allGames = state.allVideogames; //(en este caso el payload va a ser el value del select)\n      // si el value o el payload es igual a All que me traiga todos los videogames\n\n      const genreFiltered = payload === \"All\" ? allGames : allGames.filter(el => el.genres.includes(payload));\n      console.log(genreFiltered);\n      return { ...state,\n        videogames: genreFiltered\n      };\n    // esto es para no pisar el estado general \n\n    case FILTER_CREATED:\n      const gamesCreated = state.allVideogames;\n      const createdFiltered = payload === \"creado\" ? gamesCreated.filter(el => el.createdInDb) : createdFiltered.filter(el => !el.createdInDb);\n      return { ...state,\n        videogames: payload === \"all\" ? gamesCreated : createdFiltered\n      };\n    //si es \"all\" que me traiga todo, osea el state.allVideogames, sino que me traiga la funcion createdFiltered donde hace el condicional, que si selecciona \"creado\" busca si existe  en la base de datos (que es el creado por el usuario) o si no es eso que te traiga lo existente\n\n    case GET_GAME_BYNAME:\n      return { ...state,\n        videogames: payload\n      };\n    //EL PAYLOAD ES LO QUE TE TRAE LA INFO FILTRADA POR NAME\n\n    case CREATE_VIDEOGAMES:\n      return { ...state\n      };\n\n    case GET_GENRE:\n      return { ...state,\n        genres: payload\n      };\n\n    case GET_PLATFORMS:\n      return { ...state,\n        platforms: payload\n      };\n\n    case ORDER_NAME:\n      const nameOrder = state.allVideogames;\n      const orderAlph = payload === \"asc\" ? nameOrder.sort(function (a, b) {\n        if (a.name > b.name) {\n          return 1;\n        }\n\n        if (b.name > a.name) {\n          return -1;\n        } else return 0;\n      }) : nameOrder.sort(function (a, b) {\n        if (a.name > b.name) {\n          return -1;\n        }\n\n        if (b.name > a.name) {\n          return 1;\n        } else return 0;\n      });\n      console.log(state);\n      return { ...state,\n        videogames: orderAlph\n      };\n\n    case ORDER_RATING:\n      const ratingOrder = state.allVideogames;\n      const orderNum = payload === \"asc\" ? orderNum.sort(function (a, b) {\n        if (a.name > b.name) {\n          return 1;\n        }\n\n        if (b.name > a.name) {\n          return -1;\n        } else return 0;\n      }) : nameOrder.sort(function (a, b) {\n        if (a.name > b.name) {\n          return -1;\n        }\n\n        if (b.name > a.name) {\n          return 1;\n        } else return 0;\n      });\n      console.log(state);\n      return { ...state,\n        videogames: orderAlph\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/consudc/Documents/GitHub/PI VIDEOGAMES/PI-Videogames-main/client/src/reducer/index.js"],"names":["GET_GAME_BYNAME","GET_GENRE","GET_GAME_DETAIL","GET_VIDEOGAME","ORDER_NAME","ORDER_RATING","FILTER_CREATED","FILTER_GENRE","GET_PLATFORMS","CREATE_VIDEOGAMES","initialState","allVideogames","videogames","genres","platforms","reducer","state","payload","type","allGames","genreFiltered","filter","el","includes","console","log","gamesCreated","createdFiltered","createdInDb","nameOrder","orderAlph","sort","a","b","name","ratingOrder","orderNum"],"mappings":"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","sourcesContent":["import {GET_GAME_BYNAME, GET_GENRE, GET_GAME_DETAIL, GET_VIDEOGAME, ORDER_NAME, ORDER_RATING, FILTER_CREATED, FILTER_GENRE, GET_PLATFORMS, CREATE_VIDEOGAMES} from \"./types\"\n\n\n// EL REDUCER SIEMPRE TIENE QUE GENERAR UN NUEVO ESTADO, ESTE ES EL ESTADO GLOBAL!!! osea cuando se modifique algo\n//esto puede ser tmb un objeto, o un array que contenga los objetos\nconst initialState = {\n    allVideogames : [],\n    videogames: [],\n    genres: [],\n    platforms:[]\n\n}\n\n\n// aca el estado es el estado inicial y luego el otro parametro es la action pero hago destructuring {type, payload}\nfunction reducer (state = initialState, {payload, type}){\n    switch (type){\n        \n        case GET_VIDEOGAME : \n\n            return {\n                ...state,\n                allVideogames: payload,\n                videogames: payload,\n                  \n            }\n\n\n        case FILTER_GENRE : \n\n        const allGames = state.allVideogames\n        \n        //(en este caso el payload va a ser el value del select)\n        // si el value o el payload es igual a All que me traiga todos los videogames\n\n        \n        const genreFiltered = payload === \"All\"? allGames: \n        \n        allGames.filter((el) => \n        el.genres.includes(payload))\n        \n    console.log( genreFiltered )\n        return {\n            ...state,\n            videogames: genreFiltered\n        }\n// esto es para no pisar el estado general \n    case FILTER_CREATED :\n\n    const gamesCreated = state.allVideogames\n\n    const createdFiltered = payload === \"creado\"? gamesCreated.filter((el) =>el.createdInDb) : \n\n    createdFiltered.filter((el) =>!el.createdInDb)\n\n    return{\n        ...state,\n        videogames: payload ===\"all\"? gamesCreated :createdFiltered\n    }\n    //si es \"all\" que me traiga todo, osea el state.allVideogames, sino que me traiga la funcion createdFiltered donde hace el condicional, que si selecciona \"creado\" busca si existe  en la base de datos (que es el creado por el usuario) o si no es eso que te traiga lo existente\n\n    \n    case GET_GAME_BYNAME :\n        \n        return{\n            ...state,\n            videogames: payload \n        }\n\n        //EL PAYLOAD ES LO QUE TE TRAE LA INFO FILTRADA POR NAME\n\n    case CREATE_VIDEOGAMES :\n            return{\n                ...state,\n            }\n\n    case GET_GENRE:\n        return{\n        ...state,\n        genres: payload \n                }\n    case GET_PLATFORMS:\n        return{\n        ...state,\n        platforms: payload \n        }\n               \n    case ORDER_NAME : \n\n    const nameOrder = state.allVideogames\n\n    const orderAlph = payload === \"asc\"? \n    \n    nameOrder.sort(function(a, b){\n        if (a.name > b.name){\n        return 1}\n        if (b.name > a.name){\n            return -1}\n        else return 0\n    })\n     : nameOrder.sort(function(a, b){\n        if (a.name > b.name){\n        return -1}\n        if (b.name > a.name){\n            return 1}\n        else return 0\n    })\n    console.log(state)\n\n    return{\n        ...state,\n        videogames: orderAlph\n    }\n\n    case ORDER_RATING : \n\n    const ratingOrder = state.allVideogames\n\n    const orderNum = payload === \"asc\"? \n    \n    orderNum.sort(function(a, b){\n        if (a.name > b.name){\n        return 1}\n        if (b.name > a.name){\n            return -1}\n        else return 0\n    })\n     : nameOrder.sort(function(a, b){\n        if (a.name > b.name){\n        return -1}\n        if (b.name > a.name){\n            return 1}\n        else return 0\n    })\n    console.log(state)\n\n    return{\n        ...state,\n        videogames: orderAlph\n    }\n\n     \n        default : \n        return state;\n    }\n\n}\n\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}