{"ast":null,"code":"var _jsxFileName = \"/Users/consudc/Documents/GitHub/PI VIDEOGAMES/PI-Videogames-main/client/src/components/Paginado.js\";\nimport React from 'react';\nimport styles from \"./Paginado.module.css\"; //este es un estado local que setea cuantos videogames hay por pagina\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst indexLastVideogame = currentPage * gamesPerPage; //por ejemplo en el 1er caso daria 15 ==> es el indice en el que tiene que empezar la proxima, esto represnta a los primero 15 games hasta la posicion 14\n\nconst indexFirstVideogame = indexLastVideogame - gamesPerPage; //==> en el primer caso empieza en la pos 0, despues pos 15, despues 30, despues 45, 60, 75, 90 ==> el ultimo va a tener 12\n\nconst currentGamesPage = allGames.slice(indexFirstVideogame, indexLastVideogame); // //aca ejecuto el setCurrentPage => set State\n\nconst paginado = pageNumber => {\n  setCurrentPage(pageNumber);\n}; //constante paginado es la que me va a ayudar en el renderizado por pagina\n//aca te traes por props el estado de tus games per Page=15, el numero de videogames en todo el estado global =100 \n//paginado ==> se va seteando currentPage a medida que (el numero de numero de pagina cambia )\n// \n\n\nfunction Paginado() {\n  const pageNumber = []; //que redonde por arriba la division\n  //en nuestro caso son 7 --> 100/15\n\n  for (let i = 0; i <= allGames / gamesPerPage; i++) {\n    pageNumber.push(i + 1);\n  } //entonces en PageNumber te va devolver un array con 7 numeros que equivalen a la cantidad de paginas que hay, de 15 juegos por pagina\n\n\n  {\n    /* // aca le decis, existe pageNumber? si si mapealo y creame un ul con cada uno de los numero de pagina  y que se pueda hacer un onclick en cada uno de los numero y ahi se va a ir seteando el estado del currentPage a medida que le pasemos el numero atravez del onclik de c/ pagina ==>setCurrentPage */\n  }\n  {\n    /* <a  onClick={()=>paginado(number)}>{number}</a> */\n  }\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: styles.nav,\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: pageNumber && pageNumber.map(number => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => paginado(number),\n        className: currentPage == number ? \"active\" : null,\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Paginado;\nexport default Paginado;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginado\");","map":{"version":3,"sources":["/Users/consudc/Documents/GitHub/PI VIDEOGAMES/PI-Videogames-main/client/src/components/Paginado.js"],"names":["React","styles","indexLastVideogame","currentPage","gamesPerPage","indexFirstVideogame","currentGamesPage","allGames","slice","paginado","pageNumber","setCurrentPage","Paginado","i","push","nav","map","number"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB,C,CAKA;;;AACA,MAAMC,kBAAkB,GAAGC,WAAW,GAAGC,YAAzC,C,CAAqD;;AACrD,MAAMC,mBAAmB,GAAGH,kBAAkB,GAAGE,YAAjD,C,CAA8D;;AAE9D,MAAME,gBAAgB,GAAGC,QAAQ,CAACC,KAAT,CAAeH,mBAAf,EAAmCH,kBAAnC,CAAzB,C,CAGA;;AACA,MAAMO,QAAQ,GAAIC,UAAD,IAAe;AAChCC,EAAAA,cAAc,CAACD,UAAD,CAAd;AAA2B,CAD3B,C,CAGA;AAGA;AACA;AAEA;;;AAEA,SAASE,QAAT,GAAoB;AACpB,QAAMF,UAAU,GAAG,EAAnB,CADoB,CAGhB;AACA;;AACA,OAAK,IAAIG,CAAC,GAAE,CAAZ,EAAeA,CAAC,IAAIN,QAAQ,GAACH,YAA7B,EAA4CS,CAAC,EAA7C,EAAgD;AAC3CH,IAAAA,UAAU,CAACI,IAAX,CAAgBD,CAAC,GAAC,CAAlB;AACJ,GAPe,CAQpB;;;AAEgB;AAAC;AAA+S;AAChT;AAAC;AAAsD;AAErE,sBACE;AAAK,IAAA,SAAS,EAAEZ,MAAM,CAACc,GAAvB;AAAA,2BACI;AAAA,gBACML,UAAU,IACZA,UAAU,CAACM,GAAX,CAAeC,MAAM,iBACjB;AACA,QAAA,OAAO,EAAE,MAAIR,QAAQ,CAACQ,MAAD,CADrB;AAEA,QAAA,SAAS,EAAEd,WAAW,IAAIc,MAAf,GAAuB,QAAvB,GAAkC,IAF7C;AAAA,kBAGCA;AAHD,SAASA,MAAT;AAAA;AAAA;AAAA;AAAA,cADJ;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;KA5BQL,Q;AA8BT,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport styles from \"./Paginado.module.css\"\n\n\n\n\n//este es un estado local que setea cuantos videogames hay por pagina\nconst indexLastVideogame = currentPage * gamesPerPage//por ejemplo en el 1er caso daria 15 ==> es el indice en el que tiene que empezar la proxima, esto represnta a los primero 15 games hasta la posicion 14\nconst indexFirstVideogame = indexLastVideogame - gamesPerPage //==> en el primer caso empieza en la pos 0, despues pos 15, despues 30, despues 45, 60, 75, 90 ==> el ultimo va a tener 12\n\nconst currentGamesPage = allGames.slice(indexFirstVideogame,indexLastVideogame)\n \n\n// //aca ejecuto el setCurrentPage => set State\nconst paginado = (pageNumber) =>{\nsetCurrentPage(pageNumber)}\n\n//constante paginado es la que me va a ayudar en el renderizado por pagina\n\n\n//aca te traes por props el estado de tus games per Page=15, el numero de videogames en todo el estado global =100 \n//paginado ==> se va seteando currentPage a medida que (el numero de numero de pagina cambia )\n\n// \n \nfunction Paginado() {\nconst pageNumber = []\n\n    //que redonde por arriba la division\n    //en nuestro caso son 7 --> 100/15\n    for (let i= 0; i<= (allGames/gamesPerPage); i++){\n         pageNumber.push(i+1)\n    }\n//entonces en PageNumber te va devolver un array con 7 numeros que equivalen a la cantidad de paginas que hay, de 15 juegos por pagina\n\n                {/* // aca le decis, existe pageNumber? si si mapealo y creame un ul con cada uno de los numero de pagina  y que se pueda hacer un onclick en cada uno de los numero y ahi se va a ir seteando el estado del currentPage a medida que le pasemos el numero atravez del onclik de c/ pagina ==>setCurrentPage */}\n                {/* <a  onClick={()=>paginado(number)}>{number}</a> */}\n                \n  return (\n    <nav className={styles.nav} >\n        <ul >\n            { pageNumber &&\n            pageNumber.map(number =>(             \n                <li key={number}\n                onClick={()=>paginado(number)}\n                className={currentPage == number? \"active\" : null}>\n                {number} \n                </li>\n                ))\n            }\n        </ul>\n    </nav>\n  )\n}\n\nexport default Paginado"]},"metadata":{},"sourceType":"module"}