{"ast":null,"code":"import { GET_GAME_BYNAME, GET_GENRE, GET_GAME_DETAIL, GET_VIDEOGAME, ORDER_NAME, ORDER_RATING, FILTER_CREATED, FILTER_GENRE, GET_PLATFORMS, CREATE_VIDEOGAMES, DELETE_GAMES } from \"../actions/types\"; // EL REDUCER SIEMPRE TIENE QUE GENERAR UN NUEVO ESTADO, ESTE ES EL ESTADO GLOBAL!!! osea cuando se modifique algo\n\nconst initialState = {\n  allVideogames: [],\n  videogames: [],\n  genres: [],\n  platforms: [],\n  detail: []\n}; // aca el estado es el estado inicial y luego el otro parametro es la action pero hago destructuring {type, payload}\n\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    payload,\n    type\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case GET_VIDEOGAME:\n      return { ...state,\n        allVideogames: payload,\n        videogames: payload\n      };\n\n    case FILTER_GENRE:\n      const allGames = state.allVideogames;\n      const genreFiltered = payload === \"all\" ? allGames : allGames.filter(el => el.genres.includes(payload));\n      return { ...state,\n        videogames: genreFiltered\n      };\n\n    case FILTER_CREATED:\n      const gamesCreated = state.allVideogames;\n      const createdFiltered = payload === \"creado\" ? gamesCreated.filter(el => el.createdInDb) : gamesCreated.filter(el => !el.createdInDb);\n      return { ...state,\n        videogames: payload === \"all\" ? gamesCreated : createdFiltered\n      };\n    //si es \"all\" que me traiga todo, osea el state.allVideogames, sino que me traiga la funcion createdFiltered donde hace el condicional, que si selecciona \"creado\" busca si existe  en la base de datos (que es el creado por el usuario) o si no es eso que te traiga lo existente\n\n    case DELETE_GAMES:\n      const deleteGames = state.allVideogames;\n      return { ...state,\n        videogames: deleteGames.filter(c => c.id !== payload)\n      };\n\n    case GET_GAME_BYNAME:\n      return { ...state,\n        videogames: payload\n      };\n\n    case GET_GAME_DETAIL:\n      return { ...state,\n        detail: payload\n      };\n\n    case CREATE_VIDEOGAMES:\n      return { ...state\n      };\n\n    case GET_GENRE:\n      return { ...state,\n        genres: payload\n      };\n\n    case GET_PLATFORMS:\n      return { ...state,\n        platforms: payload\n      };\n\n    case ORDER_NAME:\n      const nameOrder = state.allVideogames;\n      const orderAlph = payload === \"asc\" ? nameOrder.sort(function (a, b) {\n        if (a.name > b.name) {\n          return 1;\n        }\n\n        if (b.name > a.name) {\n          return -1;\n        } else return 0;\n      }) : nameOrder.sort(function (a, b) {\n        if (a.name > b.name) {\n          return -1;\n        }\n\n        if (b.name > a.name) {\n          return 1;\n        } else return 0;\n      });\n      return { ...state,\n        videogames: orderAlph\n      };\n\n    case ORDER_RATING:\n      const ratingOrder = state.allVideogames;\n      const orderRat = payload === \"ascR\" ? ratingOrder.sort(function (a, b) {\n        if (a.rating > b.rating) {\n          return 1;\n        }\n\n        if (b.rating > a.rating) {\n          return -1;\n        } else return 0;\n      }) : ratingOrder.sort(function (a, b) {\n        if (a.rating > b.rating) {\n          return -1;\n        }\n\n        if (b.rating > a.rating) {\n          return 1;\n        } else return 0;\n      }); // console.log(state)\n\n      return { ...state,\n        videogames: orderRat\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/consudc/Documents/GitHub/PI VIDEOGAMES/PI-Videogames-main/client/src/reducer/index.js"],"names":["GET_GAME_BYNAME","GET_GENRE","GET_GAME_DETAIL","GET_VIDEOGAME","ORDER_NAME","ORDER_RATING","FILTER_CREATED","FILTER_GENRE","GET_PLATFORMS","CREATE_VIDEOGAMES","DELETE_GAMES","initialState","allVideogames","videogames","genres","platforms","detail","reducer","state","payload","type","allGames","genreFiltered","filter","el","includes","gamesCreated","createdFiltered","createdInDb","deleteGames","c","id","nameOrder","orderAlph","sort","a","b","name","ratingOrder","orderRat","rating"],"mappings":"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","sourcesContent":["\nimport {GET_GAME_BYNAME, GET_GENRE, GET_GAME_DETAIL, GET_VIDEOGAME, ORDER_NAME, ORDER_RATING, FILTER_CREATED, FILTER_GENRE, GET_PLATFORMS, CREATE_VIDEOGAMES, DELETE_GAMES} from \"../actions/types\"\n\n\n// EL REDUCER SIEMPRE TIENE QUE GENERAR UN NUEVO ESTADO, ESTE ES EL ESTADO GLOBAL!!! osea cuando se modifique algo\n\nconst initialState = {\n    allVideogames : [],\n    videogames: [],\n    genres: [],\n    platforms: [],\n    detail :[]\n}\n\n\n// aca el estado es el estado inicial y luego el otro parametro es la action pero hago destructuring {type, payload}\nfunction reducer (state = initialState, {payload, type}){\n    switch (type){\n        \n        case GET_VIDEOGAME : \n\n            return {\n                ...state,\n                allVideogames: payload,\n                videogames: payload,\n                  \n            }\n\n        case FILTER_GENRE : \n\n        const allGames = state.allVideogames\n        \n       const genreFiltered = payload === \"all\"? allGames: \n        \n        allGames.filter((el) => \n        el.genres.includes(payload))\n        \n  \n        return {\n            ...state,\n            videogames: genreFiltered\n        }\n\n    case FILTER_CREATED :\n\n    const gamesCreated = state.allVideogames\n\n    const createdFiltered = payload === \"creado\"? gamesCreated.filter((el) =>el.createdInDb) : \n\n    gamesCreated.filter((el) =>!el.createdInDb)\n\n    return{\n        ...state,\n        videogames: payload === \"all\"? gamesCreated :createdFiltered\n    }\n    //si es \"all\" que me traiga todo, osea el state.allVideogames, sino que me traiga la funcion createdFiltered donde hace el condicional, que si selecciona \"creado\" busca si existe  en la base de datos (que es el creado por el usuario) o si no es eso que te traiga lo existente\n    \n    case DELETE_GAMES :\n\n           const deleteGames = state.allVideogames\n           return {\n               ...state,\n               videogames  :  deleteGames.filter (c => c.id !== payload) \n            }\n\n    \n    case GET_GAME_BYNAME :\n \n       return{\n            ...state,\n           videogames:payload\n        }\n\n    case GET_GAME_DETAIL :\n        \n            return{\n                ...state,\n               detail: payload \n            }\n\n    case CREATE_VIDEOGAMES :\n            return{\n                ...state,\n            }\n\n    case GET_GENRE:\n        return{\n        ...state,\n        genres: payload \n                }\n    case GET_PLATFORMS:\n        return{\n        ...state,\n        platforms: payload \n        }\n               \n    case ORDER_NAME : \n\n    const nameOrder = state.allVideogames\n\n    const orderAlph = payload === \"asc\"? \n    \n    nameOrder.sort(function(a, b){\n        if (a.name > b.name){\n        return 1}\n        if (b.name > a.name){\n            return -1}\n        else return 0\n    })\n     : nameOrder.sort(function(a, b){\n        if (a.name > b.name){\n        return -1}\n        if (b.name > a.name){\n            return 1}\n        else return 0\n    })\n \n\n    return{\n        ...state,\n        videogames: orderAlph\n    }\n\n    case ORDER_RATING : \n\n    const ratingOrder = state.allVideogames\n\n\n    const orderRat = payload === \"ascR\"? \n    \n    ratingOrder.sort(function(a, b){\n        if (a.rating > b.rating){\n        return 1}\n        if (b.rating > a.rating){\n            return -1}\n        else return 0\n    })\n     : ratingOrder.sort(function(a, b){\n        if (a.rating > b.rating){\n        return -1}\n        if (b.rating > a.rating){\n            return 1}\n        else return 0\n    })\n    // console.log(state)\n\n    return{\n        ...state,\n        videogames: orderRat\n    }\n\n     \n        default : \n        return state;\n    }\n\n}\n\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}