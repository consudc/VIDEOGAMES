{"ast":null,"code":"var _jsxFileName = \"/Users/consudc/Documents/GitHub/PI VIDEOGAMES/PI-Videogames-main/client/src/components/Paginado.js\";\nimport React from 'react';\nimport styles from \"./Paginado.module.css\"; //aca te traes por props el estado de tus games per Page=15, el numero de videogames en todo el estado global =100 \n//paginado ==> se va seteando currentPage a medida que (el numero de numero de pagina cambia )\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Paginado(_ref) {\n  let {\n    gamesPerPage,\n    allGames,\n    paginado\n  } = _ref;\n  const pageNumber = []; //que redonde por arriba la division\n  //en nuestro caso son 7 --> 100/15\n\n  for (let i = 0; i <= allGames / gamesPerPage; i++) {\n    pageNumber.push(i + 1);\n  } //entonces en PageNumber te va devolver un array con 7 numeros que equivalen a la cantidad de paginas que hay, de 15 juegos por pagina\n\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: styles.nav,\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.paginado,\n      children: pageNumber && pageNumber.map(number => /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: styles.ul,\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          className: pageNumber,\n          onClick: () => paginado(number),\n          children: number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this)\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Paginado;\nexport default Paginado;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginado\");","map":{"version":3,"sources":["/Users/consudc/Documents/GitHub/PI VIDEOGAMES/PI-Videogames-main/client/src/components/Paginado.js"],"names":["React","styles","Paginado","gamesPerPage","allGames","paginado","pageNumber","i","push","nav","map","number","ul"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB,C,CAGA;AACA;;;;AAEA,SAASC,QAAT,OAAqD;AAAA,MAAnC;AAACC,IAAAA,YAAD;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA;AAAxB,GAAmC;AACjD,QAAMC,UAAU,GAAG,EAAnB,CADiD,CAGjD;AACA;;AACA,OAAK,IAAIC,CAAC,GAAE,CAAZ,EAAeA,CAAC,IAAIH,QAAQ,GAACD,YAA7B,EAA4CI,CAAC,EAA7C,EAAgD;AAC3CD,IAAAA,UAAU,CAACE,IAAX,CAAgBD,CAAC,GAAC,CAAlB;AACJ,GAPgD,CAQrD;;;AAGE,sBACE;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACQ,GAAvB;AAAA,2BACI;AAAI,MAAA,SAAS,EAAER,MAAM,CAACI,QAAtB;AAAA,gBACMC,UAAU,IACZA,UAAU,CAACI,GAAX,CAAeC,MAAM,iBACjB;AAAI,QAAA,SAAS,EAAEV,MAAM,CAACW,EAAtB;AAAA,+BAEA;AAAG,UAAA,SAAS,EAAEN,UAAd;AAA0B,UAAA,OAAO,EAAE,MAAID,QAAQ,CAACM,MAAD,CAA/C;AAAA,oBAA0DA;AAA1D;AAAA;AAAA;AAAA;AAAA;AAFA,SAA+BA,MAA/B;AAAA;AAAA;AAAA;AAAA,cADJ;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;KA1BQT,Q;AA4BT,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport styles from \"./Paginado.module.css\"\n\n\n//aca te traes por props el estado de tus games per Page=15, el numero de videogames en todo el estado global =100 \n//paginado ==> se va seteando currentPage a medida que (el numero de numero de pagina cambia )\n\nfunction Paginado({gamesPerPage,allGames, paginado}) {\n    const pageNumber = []\n\n    //que redonde por arriba la division\n    //en nuestro caso son 7 --> 100/15\n    for (let i= 0; i<= (allGames/gamesPerPage); i++){\n         pageNumber.push(i+1)\n    }\n//entonces en PageNumber te va devolver un array con 7 numeros que equivalen a la cantidad de paginas que hay, de 15 juegos por pagina\n\n\n  return (\n    <nav className={styles.nav} >\n        <ul className={styles.paginado}>\n            { pageNumber &&\n            pageNumber.map(number =>(             \n                <ul className={styles.ul} key={number}>\n                {/* // aca le decis, existe pageNumber? si si mapealo y creame un ul con cada uno de los numero de pagina  y que se pueda hacer un onclick en cada uno de los numero y ahi se va a ir seteando el estado del currentPage a medida que le pasemos el numero atravez del onclik de c/ pagina ==>setCurrentPage */}\n                <a className={pageNumber} onClick={()=>paginado(number)}>{number}</a>\n              \n                </ul>\n                ))\n            }\n        </ul>\n    </nav>\n  )\n}\n\nexport default Paginado"]},"metadata":{},"sourceType":"module"}